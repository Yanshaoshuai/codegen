package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package}.${moduleName}.common.PageResult;
import ${package}.${moduleName}.common.R;
import ${package}.${moduleName}.pojo.${className};
import ${package}.${moduleName}.pojo.dto.${className}DTO;
import ${package}.${moduleName}.service.${className}Service;
import org.springframework.beans.BeanUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import lombok.extern.slf4j.Slf4j;
/**
 * <p>
 * ${comments}
 * </p>
 *
 * @package:  ${package}.${moduleName}.controller
 * @description: ${comments}
 * @author: ${author}
 * @date: Created in ${datetime}
 * @copyright: Copyright (c) ${year}
 * @version: V1.0
 * @modified: ${author}
 */
@Slf4j
@RestController
@RequestMapping("/${pathName}")
@Api("${className}Controller")
public class ${className}Controller {
    @Autowired
    private  ${className}Service ${classname}Service;

    /**
     * 分页查询${comments}
     * @param ${classname}DTO 数据传输对象
     * @return R
     */
    @GetMapping("/page")
    @ApiOperation(value = "分页查询${comments}", notes = "分页查询${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${classname}DTO", value = "数据传输对象", required = true)
    })
    public R list${className}(${className}DTO ${classname}DTO) {
        log.info("list${className}-->{}",${classname}DTO);
        Page page=new Page(${classname}DTO.getPageNumber(),${classname}DTO.getPageSize());
        ${className} ${classname}=new ${className}();
        BeanUtils.copyProperties(${classname}DTO,${classname});
        ${classname}Service.page(page, Wrappers.query(${classname}));
        PageResult<${className}> pageResult=new PageResult(page.getTotal(),page.getCurrent(),page.getSize(),page.getRecords());
        return R.success(pageResult);
    }


    /**
     * 通过id查询${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */
    @GetMapping("/{${pk.lowerAttrName}}")
    @ApiOperation(value = "通过id查询${comments}", notes = "通过id查询${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键id", required = true)
    })
    public R get${className}(@PathVariable("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}){
      log.info("get${className}-->{}",${pk.lowerAttrName});
      return R.success(${classname}Service.getById(${pk.lowerAttrName}));
    }

    /**
     * 新增${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @PostMapping
    @ApiOperation(value = "新增${comments}", notes = "新增${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${classname}", value = "${classname}实体", required = true)
    })
    public R save${className}(@RequestBody ${className} ${classname}){
      log.info("save${className}-->{}",${classname});
      return R.success(${classname}Service.save(${classname}));
    }

    /**
     * 修改${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @PutMapping
    @ApiOperation(value = "修改${comments}", notes = "修改${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键id", required = true)
    })
    public R update${className}(@RequestBody ${className} ${classname}){
      log.info("update${className}-->{}",${classname});
      return R.success(${classname}Service.updateById(${classname}));
    }

    /**
     * 通过id删除${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */
    @DeleteMapping("/{${pk.lowerAttrName}}")
    @ApiOperation(value = "删除${comments}", notes = "删除${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键id", required = true)
    })
    public R delete${className}(@PathVariable ${pk.attrType} ${pk.lowerAttrName}){
      log.info("delete${className}-->{}",${pk.lowerAttrName});
      return R.success(${classname}Service.removeById(${pk.lowerAttrName}));
    }

}
